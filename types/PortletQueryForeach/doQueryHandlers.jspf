<%--
  @Summary: Build a set of QueryHandler based on PortletQueryForeach options
            and contextual information (workspace, member etc).
            The resulting set (queryHandlerSet) is used among others by doQuery.jsp
--%><%@page import="java.util.stream.Collectors"%>
<%@page import="com.jalios.jcms.handler.QueryHandler"%>
<%

  final Set queryHandlerSet = new LinkedHashSet();

  {
    // If Search in DB is enabled, the following condition are guaranteed by PortletQueryForeachDataController : 
    // -   portlet.getRefineQueries()  != "CurrentWSCat"
    // -   portlet.getRefineWithContextualCategories() == false
    // -   portlet.getSkipFirstResults() == 0
    // -   portlet.getFirstPublications() is empty
    // -   queries.length <= 1
    // Settings depending on query Concent : 
    // -   IF portlet.getRefineQueries()  != "CurrentWS"  --> queries.cids == null 

    final boolean    searchInDB = box.getSearchInDB();
    final String     queryMember   = (String) request.getAttribute("queryMember");
    final Member     qMember       = queryMember == null ? loggedMember : channel.getMember(queryMember);
    
    String[]   queries       = (String[]) box.getFieldValue(jcmsContext, "queries"); // box.getQueries();

    // Depending on the searchInDB configuration either proposedDataSet is used or else the refineCat
    Set        proposedDataSet;
    Category   refineCat;
    boolean    exactCat;
    
    if ("Current".equals(box.getRefineQueries())) {
      proposedDataSet = currentCategory.getAllPublicationSet();
      refineCat = currentCategory;
      exactCat = false;
    } else if ("CurrentExact".equals(box.getRefineQueries())) {
      proposedDataSet = currentCategory.getPublicationSet();
      refineCat = currentCategory;
      exactCat = true;
    } else if ("Portal".equals(box.getRefineQueries())) {
      proposedDataSet = portalCategory.getAllPublicationSet();
      refineCat = portalCategory;
      exactCat = false;
    } else if ("PortalExact".equals(box.getRefineQueries())) {
      proposedDataSet = portalCategory.getPublicationSet();
      refineCat = portalCategory;
      exactCat = true;
    } else if ("CurrentWSCat".equals(box.getRefineQueries())) {
      TreeSet wsCatPubSet = new TreeSet();
      for(Iterator it = workspace.getCatSet().iterator() ; it.hasNext() ; ){
        Category wsCat = (Category) it.next();
        wsCatPubSet.addAll(wsCat.getAllPublicationSet());
      }
      proposedDataSet = wsCatPubSet;
      refineCat = null;
      exactCat = false;
    } else {
      proposedDataSet = null;
      refineCat = null;
      exactCat = false;
    }
    
    
    // Handle Dynamic query
    if (Util.toBoolean(PortalManager.receiveAction(request, box, "DynamicQuery"),false)){
       queries = new String[]{ ServletUtil.getQueryString(request, false) };
    }
    
        
    // DIGIWIN - ajout du cas pour la recherche à facettes.
    if(Util.notEmpty(request.getParameter("cidBranches")) && (box.getId().equals(getDataIdParameter("portlet"))) ) {  
    	// Ticket Jalios : https://community.jalios.com/jcms/jc_155586/fr/portlet-recherche?portal=jc_86490
    	//PortalManager.removeAction(request, box, "DynamicQuery");
    	// Récupère les branches de catégories de la recherche à facettes
    	String[] cidBranches = request.getParameterValues("cidBranches");
    	// Création d'autant de query qu'il y a de branche de catégories dans la recherche à facettes 
    	queries = new String[cidBranches.length];
    	// Itération sur chacune des branches de la recherche.
    	// Chaque branche à sa propre query et cette query doit n'avoir que les cids enfants de sa branche
    	for(int i = 0 ; i < cidBranches.length ; i++){
    		// Récupère la query de la recherche pour modifier son paramètre cids
    		QueryHandler itQh = new QueryHandler(ServletUtil.getQueryString(request, false));   		   		
    		// Récupère la liste des paramètres
    		List<String> cidsParamList = Util.notEmpty(itQh.getCids()) ? Arrays.asList(itQh.getCids()) : new ArrayList<String>(); 	
    		
    		// Si un enfant d'une catégorie est sélectionné alors
    		// la catégorie parente est retirée des cids
    		List<Category> cidsParamCatList = cidsParamList.stream().map(e -> channel.getCategory(e)).collect(Collectors.toList());
    		// La liste des parents des cids passé en paramètre
    		List<Category> cidsParamParentCatList = cidsParamCatList.stream().map(Category::getParent).collect(Collectors.toList());
    		// La liste des cids filtrée seulement sur les cids qui doivent être recherchés
    		// Si le cids en paramètre est dans la liste des parent de cids, alors celui-ci est retiré
    		List<String> cidsFilterCatIdList = cidsParamCatList.stream().filter(e -> !cidsParamParentCatList.contains(e) ).map(Category::getId).collect(Collectors.toList());
    		
    		// Récupère la catégorie de la branche courante
            String itCidBranche = cidBranches[i];
            Category itCatBranche = channel.getCategory(itCidBranche);
            // Récupère les catégories enfants de cette branche de catégorie (permettra de filtrer seulement sur les cids de cette branche)
            Set<Category> itCatDescendantBrancheSet = itCatBranche.getDescendantSet();          
            List<String> itCatDescendantBrancheIdSet = itCatDescendantBrancheSet.stream().map(Category::getId).collect(Collectors.toList()) ;  
    		
    		// Ne retient que les cids de la branche courante sans les parents d'une catégorie déjà sélectionnée		    		
    		itCatDescendantBrancheIdSet.retainAll(cidsFilterCatIdList);  
    		// Si aucun cids de branche de retenu alors garde les cids par défaut de la recherche à facettes
    		if(Util.notEmpty(itCatDescendantBrancheIdSet)) {
    			   itQh.setCids( itCatDescendantBrancheIdSet.toArray(new String[itCatDescendantBrancheIdSet.size()]) ); 
    		}
  			// La query est ajoutée au tableau des query pour être éxécutée
    		queries[i] =  itQh.getQueryString();   		
    	}
    }
    
    
    
    // Works on queries
    if (Util.notEmpty(queries)){
      for (int i = 0 ; i < queries.length ; i++){
        
			  String queryString = queries[i];
				if (Util.isEmpty(queryString))
				  continue;
				  
				com.jalios.jcms.handler.QueryHandler handler = new com.jalios.jcms.handler.QueryHandler(queryString, request);
				handler.setAttribute(QueryFilter.PORTLET_QUERY, Boolean.TRUE); 
				handler.setSearchInDB(searchInDB); // Fix bug JCMS-3391
				handler.setDataSet(proposedDataSet);
				handler.setLoggedMember(qMember);
				handler.setResponse(response);
        handler.setIgnoreDefaultTypes(!channel.getBooleanProperty("query.default.types-off.apply-to-pqf", false)); // Fix bug JCMS-5753
				handler.setReverse(Util.toBoolean(PortalManager.receiveAction(request , box , "reverse"),false));
				handler.setStart(Util.toInt(PortalManager.receiveAction(request , box , "start"), box.getSkipFirstResults()));
				handler.setPageSize(Util.toInt(PortalManager.receiveAction(request , box , "pageSize"), box.getMaxResults()));
				handler.setSort(Util.getString(PortalManager.receiveAction(request , box , "sort"), Util.getString(box.getOrderBy(), "mdate")));
				handler.setPagerAll(Util.toBoolean(PortalManager.receiveAction(request , box , "pagerAll"), false));

        // If portlet must return result from database and a refine category was specified
        // Add the refine category to those specified in QueryHandler
        if (searchInDB && refineCat != null) {
          String[] cids = handler.getCids();
          if (Util.isEmpty(cids)) {
            cids = new String[] { refineCat.getId() };
          } else {
            cids = Arrays.copyOf(cids, cids.length + 1);
            cids[cids.length - 1] = refineCat.getId();
          }
          handler.setCids(cids);
          handler.setExactCat(exactCat);
        }
    
        if (box.getRefineWithContextualCategories() ){
				  String[] cids1   = JcmsUtil.dataArrayToStringArray(ctxCategories);
				  String[] cids2   = handler.getCids();

				  List     cidList = new ArrayList();
				  if (Util.notEmpty(cids1))
				    cidList.addAll(Arrays.asList(cids1));
				  if (Util.notEmpty(cids2))
				    cidList.addAll(Arrays.asList(cids2));
				  String[] cids3   = (String[])cidList.toArray(new String[0]);
				  if (Util.notEmpty(cids3)){
				    handler.setCids(cids3);
				  }
				}
				    
			  if ("CurrentWS".equals(box.getRefineQueries())) {
			    handler.setWorkspace(workspace);
			  }

        if (handler.getSearchInSubWorkspaces()) {
          request.setAttribute("query.result.showWs", Boolean.TRUE);
        }

        if(Util.notEmpty(handler.getCids())) {
	        for(String itCid : handler.getCids()) {

	        }
        }

			  queryHandlerSet.add(handler);
      }
    }
  }
%>